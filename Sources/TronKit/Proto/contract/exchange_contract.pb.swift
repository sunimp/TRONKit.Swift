// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: core/contract/exchange_contract.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// MARK: - _GeneratedWithProtocGenSwiftVersion

/// If the compiler emits an error on this type, it is because this file
/// was generated by a version of the `protoc` Swift plug-in that is
/// incompatible with the version of SwiftProtobuf to which you are linking.
/// Please ensure that you are building against the same version of the API
/// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 { }
    typealias Version = _2
}

// MARK: - Protocol_ExchangeCreateContract

struct Protocol_ExchangeCreateContract {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ownerAddress: Data = .init()

    var firstTokenID: Data = .init()

    var firstTokenBalance: Int64 = 0

    var secondTokenID: Data = .init()

    var secondTokenBalance: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() { }
}

// MARK: - Protocol_ExchangeInjectContract

struct Protocol_ExchangeInjectContract {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ownerAddress: Data = .init()

    var exchangeID: Int64 = 0

    var tokenID: Data = .init()

    var quant: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() { }
}

// MARK: - Protocol_ExchangeWithdrawContract

struct Protocol_ExchangeWithdrawContract {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ownerAddress: Data = .init()

    var exchangeID: Int64 = 0

    var tokenID: Data = .init()

    var quant: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() { }
}

// MARK: - Protocol_ExchangeTransactionContract

struct Protocol_ExchangeTransactionContract {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ownerAddress: Data = .init()

    var exchangeID: Int64 = 0

    var tokenID: Data = .init()

    var quant: Int64 = 0

    var expected: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() { }
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Protocol_ExchangeCreateContract: @unchecked Sendable { }
extension Protocol_ExchangeInjectContract: @unchecked Sendable { }
extension Protocol_ExchangeWithdrawContract: @unchecked Sendable { }
extension Protocol_ExchangeTransactionContract: @unchecked Sendable { }
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "protocol"

// MARK: - Protocol_ExchangeCreateContract + SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding

extension Protocol_ExchangeCreateContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding
{
    static let protoMessageName: String = _protobuf_package + ".ExchangeCreateContract"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "owner_address"),
        2: .standard(proto: "first_token_id"),
        3: .standard(proto: "first_token_balance"),
        4: .standard(proto: "second_token_id"),
        5: .standard(proto: "second_token_balance"),
    ]

    mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &ownerAddress)
            case 2: try decoder.decodeSingularBytesField(value: &firstTokenID)
            case 3: try decoder.decodeSingularInt64Field(value: &firstTokenBalance)
            case 4: try decoder.decodeSingularBytesField(value: &secondTokenID)
            case 5: try decoder.decodeSingularInt64Field(value: &secondTokenBalance)
            default: break
            }
        }
    }

    func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        if !ownerAddress.isEmpty {
            try visitor.visitSingularBytesField(value: ownerAddress, fieldNumber: 1)
        }
        if !firstTokenID.isEmpty {
            try visitor.visitSingularBytesField(value: firstTokenID, fieldNumber: 2)
        }
        if firstTokenBalance != 0 {
            try visitor.visitSingularInt64Field(value: firstTokenBalance, fieldNumber: 3)
        }
        if !secondTokenID.isEmpty {
            try visitor.visitSingularBytesField(value: secondTokenID, fieldNumber: 4)
        }
        if secondTokenBalance != 0 {
            try visitor.visitSingularInt64Field(value: secondTokenBalance, fieldNumber: 5)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Protocol_ExchangeCreateContract, rhs: Protocol_ExchangeCreateContract) -> Bool {
        if lhs.ownerAddress != rhs.ownerAddress { return false }
        if lhs.firstTokenID != rhs.firstTokenID { return false }
        if lhs.firstTokenBalance != rhs.firstTokenBalance { return false }
        if lhs.secondTokenID != rhs.secondTokenID { return false }
        if lhs.secondTokenBalance != rhs.secondTokenBalance { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

// MARK: - Protocol_ExchangeInjectContract + SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding

extension Protocol_ExchangeInjectContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding
{
    static let protoMessageName: String = _protobuf_package + ".ExchangeInjectContract"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "owner_address"),
        2: .standard(proto: "exchange_id"),
        3: .standard(proto: "token_id"),
        4: .same(proto: "quant"),
    ]

    mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &ownerAddress)
            case 2: try decoder.decodeSingularInt64Field(value: &exchangeID)
            case 3: try decoder.decodeSingularBytesField(value: &tokenID)
            case 4: try decoder.decodeSingularInt64Field(value: &quant)
            default: break
            }
        }
    }

    func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        if !ownerAddress.isEmpty {
            try visitor.visitSingularBytesField(value: ownerAddress, fieldNumber: 1)
        }
        if exchangeID != 0 {
            try visitor.visitSingularInt64Field(value: exchangeID, fieldNumber: 2)
        }
        if !tokenID.isEmpty {
            try visitor.visitSingularBytesField(value: tokenID, fieldNumber: 3)
        }
        if quant != 0 {
            try visitor.visitSingularInt64Field(value: quant, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Protocol_ExchangeInjectContract, rhs: Protocol_ExchangeInjectContract) -> Bool {
        if lhs.ownerAddress != rhs.ownerAddress { return false }
        if lhs.exchangeID != rhs.exchangeID { return false }
        if lhs.tokenID != rhs.tokenID { return false }
        if lhs.quant != rhs.quant { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

// MARK: - Protocol_ExchangeWithdrawContract + SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding

extension Protocol_ExchangeWithdrawContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding
{
    static let protoMessageName: String = _protobuf_package + ".ExchangeWithdrawContract"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "owner_address"),
        2: .standard(proto: "exchange_id"),
        3: .standard(proto: "token_id"),
        4: .same(proto: "quant"),
    ]

    mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &ownerAddress)
            case 2: try decoder.decodeSingularInt64Field(value: &exchangeID)
            case 3: try decoder.decodeSingularBytesField(value: &tokenID)
            case 4: try decoder.decodeSingularInt64Field(value: &quant)
            default: break
            }
        }
    }

    func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        if !ownerAddress.isEmpty {
            try visitor.visitSingularBytesField(value: ownerAddress, fieldNumber: 1)
        }
        if exchangeID != 0 {
            try visitor.visitSingularInt64Field(value: exchangeID, fieldNumber: 2)
        }
        if !tokenID.isEmpty {
            try visitor.visitSingularBytesField(value: tokenID, fieldNumber: 3)
        }
        if quant != 0 {
            try visitor.visitSingularInt64Field(value: quant, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Protocol_ExchangeWithdrawContract, rhs: Protocol_ExchangeWithdrawContract) -> Bool {
        if lhs.ownerAddress != rhs.ownerAddress { return false }
        if lhs.exchangeID != rhs.exchangeID { return false }
        if lhs.tokenID != rhs.tokenID { return false }
        if lhs.quant != rhs.quant { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

// MARK: - Protocol_ExchangeTransactionContract + SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding

extension Protocol_ExchangeTransactionContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding
{
    static let protoMessageName: String = _protobuf_package + ".ExchangeTransactionContract"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "owner_address"),
        2: .standard(proto: "exchange_id"),
        3: .standard(proto: "token_id"),
        4: .same(proto: "quant"),
        5: .same(proto: "expected"),
    ]

    mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &ownerAddress)
            case 2: try decoder.decodeSingularInt64Field(value: &exchangeID)
            case 3: try decoder.decodeSingularBytesField(value: &tokenID)
            case 4: try decoder.decodeSingularInt64Field(value: &quant)
            case 5: try decoder.decodeSingularInt64Field(value: &expected)
            default: break
            }
        }
    }

    func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        if !ownerAddress.isEmpty {
            try visitor.visitSingularBytesField(value: ownerAddress, fieldNumber: 1)
        }
        if exchangeID != 0 {
            try visitor.visitSingularInt64Field(value: exchangeID, fieldNumber: 2)
        }
        if !tokenID.isEmpty {
            try visitor.visitSingularBytesField(value: tokenID, fieldNumber: 3)
        }
        if quant != 0 {
            try visitor.visitSingularInt64Field(value: quant, fieldNumber: 4)
        }
        if expected != 0 {
            try visitor.visitSingularInt64Field(value: expected, fieldNumber: 5)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Protocol_ExchangeTransactionContract, rhs: Protocol_ExchangeTransactionContract) -> Bool {
        if lhs.ownerAddress != rhs.ownerAddress { return false }
        if lhs.exchangeID != rhs.exchangeID { return false }
        if lhs.tokenID != rhs.tokenID { return false }
        if lhs.quant != rhs.quant { return false }
        if lhs.expected != rhs.expected { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
