// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: core/contract/account_contract.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//
// java-tron is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// java-tron is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

import Foundation
import SwiftProtobuf

// MARK: - _GeneratedWithProtocGenSwiftVersion

/// If the compiler emits an error on this type, it is because this file
/// was generated by a version of the `protoc` Swift plug-in that is
/// incompatible with the version of SwiftProtobuf to which you are linking.
/// Please ensure that you are building against the same version of the API
/// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 { }
    typealias Version = _2
}

// MARK: - Protocol_AccountCreateContract

struct Protocol_AccountCreateContract {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ownerAddress: Data = .init()

    var accountAddress: Data = .init()

    var type: Protocol_AccountType = .normal

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() { }
}

// MARK: - Protocol_AccountUpdateContract

/// Update account name. Account name is not unique now.
struct Protocol_AccountUpdateContract {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var accountName: Data = .init()

    var ownerAddress: Data = .init()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() { }
}

// MARK: - Protocol_SetAccountIDContract

/// Set account id if the account has no id. Account id is unique and case insensitive.
struct Protocol_SetAccountIDContract {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var accountID: Data = .init()

    var ownerAddress: Data = .init()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() { }
}

// MARK: - Protocol_AccountPermissionUpdateContract

struct Protocol_AccountPermissionUpdateContract {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ownerAddress: Data = .init()

    /// Empty is invalidate
    var owner: Protocol_Permission {
        get { _owner ?? Protocol_Permission() }
        set { _owner = newValue }
    }

    /// Returns true if `owner` has been explicitly set.
    var hasOwner: Bool { _owner != nil }
    /// Clears the value of `owner`. Subsequent reads from it will return its default value.
    mutating func clearOwner() { _owner = nil }

    /// Can be empty
    var witness: Protocol_Permission {
        get { _witness ?? Protocol_Permission() }
        set { _witness = newValue }
    }

    /// Returns true if `witness` has been explicitly set.
    var hasWitness: Bool { _witness != nil }
    /// Clears the value of `witness`. Subsequent reads from it will return its default value.
    mutating func clearWitness() { _witness = nil }

    /// Empty is invalidate
    var actives: [Protocol_Permission] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() { }

    private var _owner: Protocol_Permission?
    private var _witness: Protocol_Permission?
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Protocol_AccountCreateContract: @unchecked Sendable { }
extension Protocol_AccountUpdateContract: @unchecked Sendable { }
extension Protocol_SetAccountIDContract: @unchecked Sendable { }
extension Protocol_AccountPermissionUpdateContract: @unchecked Sendable { }
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "protocol"

// MARK: - Protocol_AccountCreateContract + SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding

extension Protocol_AccountCreateContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding
{
    static let protoMessageName: String = _protobuf_package + ".AccountCreateContract"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "owner_address"),
        2: .standard(proto: "account_address"),
        3: .same(proto: "type"),
    ]

    mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &ownerAddress)
            case 2: try decoder.decodeSingularBytesField(value: &accountAddress)
            case 3: try decoder.decodeSingularEnumField(value: &type)
            default: break
            }
        }
    }

    func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        if !ownerAddress.isEmpty {
            try visitor.visitSingularBytesField(value: ownerAddress, fieldNumber: 1)
        }
        if !accountAddress.isEmpty {
            try visitor.visitSingularBytesField(value: accountAddress, fieldNumber: 2)
        }
        if type != .normal {
            try visitor.visitSingularEnumField(value: type, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Protocol_AccountCreateContract, rhs: Protocol_AccountCreateContract) -> Bool {
        if lhs.ownerAddress != rhs.ownerAddress { return false }
        if lhs.accountAddress != rhs.accountAddress { return false }
        if lhs.type != rhs.type { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

// MARK: - Protocol_AccountUpdateContract + SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding

extension Protocol_AccountUpdateContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding
{
    static let protoMessageName: String = _protobuf_package + ".AccountUpdateContract"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "account_name"),
        2: .standard(proto: "owner_address"),
    ]

    mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &accountName)
            case 2: try decoder.decodeSingularBytesField(value: &ownerAddress)
            default: break
            }
        }
    }

    func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        if !accountName.isEmpty {
            try visitor.visitSingularBytesField(value: accountName, fieldNumber: 1)
        }
        if !ownerAddress.isEmpty {
            try visitor.visitSingularBytesField(value: ownerAddress, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Protocol_AccountUpdateContract, rhs: Protocol_AccountUpdateContract) -> Bool {
        if lhs.accountName != rhs.accountName { return false }
        if lhs.ownerAddress != rhs.ownerAddress { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

// MARK: - Protocol_SetAccountIDContract + SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding

extension Protocol_SetAccountIDContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding
{
    static let protoMessageName: String = _protobuf_package + ".SetAccountIdContract"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "account_id"),
        2: .standard(proto: "owner_address"),
    ]

    mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &accountID)
            case 2: try decoder.decodeSingularBytesField(value: &ownerAddress)
            default: break
            }
        }
    }

    func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        if !accountID.isEmpty {
            try visitor.visitSingularBytesField(value: accountID, fieldNumber: 1)
        }
        if !ownerAddress.isEmpty {
            try visitor.visitSingularBytesField(value: ownerAddress, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Protocol_SetAccountIDContract, rhs: Protocol_SetAccountIDContract) -> Bool {
        if lhs.accountID != rhs.accountID { return false }
        if lhs.ownerAddress != rhs.ownerAddress { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

// MARK: - Protocol_AccountPermissionUpdateContract + SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding

extension Protocol_AccountPermissionUpdateContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding
{
    static let protoMessageName: String = _protobuf_package + ".AccountPermissionUpdateContract"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "owner_address"),
        2: .same(proto: "owner"),
        3: .same(proto: "witness"),
        4: .same(proto: "actives"),
    ]

    mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &ownerAddress)
            case 2: try decoder.decodeSingularMessageField(value: &_owner)
            case 3: try decoder.decodeSingularMessageField(value: &_witness)
            case 4: try decoder.decodeRepeatedMessageField(value: &actives)
            default: break
            }
        }
    }

    func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !ownerAddress.isEmpty {
            try visitor.visitSingularBytesField(value: ownerAddress, fieldNumber: 1)
        }
        try { if let v = self._owner {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        try { if let v = self._witness {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        } }()
        if !actives.isEmpty {
            try visitor.visitRepeatedMessageField(value: actives, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Protocol_AccountPermissionUpdateContract, rhs: Protocol_AccountPermissionUpdateContract) -> Bool {
        if lhs.ownerAddress != rhs.ownerAddress { return false }
        if lhs._owner != rhs._owner { return false }
        if lhs._witness != rhs._witness { return false }
        if lhs.actives != rhs.actives { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
