// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: core/Discover.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// MARK: - _GeneratedWithProtocGenSwiftVersion

/// If the compiler emits an error on this type, it is because this file
/// was generated by a version of the `protoc` Swift plug-in that is
/// incompatible with the version of SwiftProtobuf to which you are linking.
/// Please ensure that you are building against the same version of the API
/// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 { }
    typealias Version = _2
}

// MARK: - Protocol_Endpoint

struct Protocol_Endpoint {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var address: Data = .init()

    var port: Int32 = 0

    var nodeID: Data = .init()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() { }
}

// MARK: - Protocol_PingMessage

struct Protocol_PingMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var from: Protocol_Endpoint {
        get { _from ?? Protocol_Endpoint() }
        set { _from = newValue }
    }

    /// Returns true if `from` has been explicitly set.
    var hasFrom: Bool { _from != nil }
    /// Clears the value of `from`. Subsequent reads from it will return its default value.
    mutating func clearFrom() { _from = nil }

    var to: Protocol_Endpoint {
        get { _to ?? Protocol_Endpoint() }
        set { _to = newValue }
    }

    /// Returns true if `to` has been explicitly set.
    var hasTo: Bool { _to != nil }
    /// Clears the value of `to`. Subsequent reads from it will return its default value.
    mutating func clearTo() { _to = nil }

    var version: Int32 = 0

    var timestamp: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() { }

    fileprivate var _from: Protocol_Endpoint?
    private var _to: Protocol_Endpoint?
}

// MARK: - Protocol_PongMessage

struct Protocol_PongMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var from: Protocol_Endpoint {
        get { _from ?? Protocol_Endpoint() }
        set { _from = newValue }
    }

    /// Returns true if `from` has been explicitly set.
    var hasFrom: Bool { _from != nil }
    /// Clears the value of `from`. Subsequent reads from it will return its default value.
    mutating func clearFrom() { _from = nil }

    var echo: Int32 = 0

    var timestamp: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() { }

    fileprivate var _from: Protocol_Endpoint?
}

// MARK: - Protocol_FindNeighbours

struct Protocol_FindNeighbours {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var from: Protocol_Endpoint {
        get { _from ?? Protocol_Endpoint() }
        set { _from = newValue }
    }

    /// Returns true if `from` has been explicitly set.
    var hasFrom: Bool { _from != nil }
    /// Clears the value of `from`. Subsequent reads from it will return its default value.
    mutating func clearFrom() { _from = nil }

    var targetID: Data = .init()

    var timestamp: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() { }

    fileprivate var _from: Protocol_Endpoint?
}

// MARK: - Protocol_Neighbours

struct Protocol_Neighbours {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var from: Protocol_Endpoint {
        get { _from ?? Protocol_Endpoint() }
        set { _from = newValue }
    }

    /// Returns true if `from` has been explicitly set.
    var hasFrom: Bool { _from != nil }
    /// Clears the value of `from`. Subsequent reads from it will return its default value.
    mutating func clearFrom() { _from = nil }

    var neighbours: [Protocol_Endpoint] = []

    var timestamp: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() { }

    fileprivate var _from: Protocol_Endpoint?
}

// MARK: - Protocol_BackupMessage

struct Protocol_BackupMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var flag = false

    var priority: Int32 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() { }
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Protocol_Endpoint: @unchecked Sendable { }
extension Protocol_PingMessage: @unchecked Sendable { }
extension Protocol_PongMessage: @unchecked Sendable { }
extension Protocol_FindNeighbours: @unchecked Sendable { }
extension Protocol_Neighbours: @unchecked Sendable { }
extension Protocol_BackupMessage: @unchecked Sendable { }
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "protocol"

// MARK: - Protocol_Endpoint + SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding

extension Protocol_Endpoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Endpoint"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "address"),
        2: .same(proto: "port"),
        3: .same(proto: "nodeId"),
    ]

    mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &address)
            case 2: try decoder.decodeSingularInt32Field(value: &port)
            case 3: try decoder.decodeSingularBytesField(value: &nodeID)
            default: break
            }
        }
    }

    func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        if !address.isEmpty {
            try visitor.visitSingularBytesField(value: address, fieldNumber: 1)
        }
        if port != 0 {
            try visitor.visitSingularInt32Field(value: port, fieldNumber: 2)
        }
        if !nodeID.isEmpty {
            try visitor.visitSingularBytesField(value: nodeID, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Protocol_Endpoint, rhs: Protocol_Endpoint) -> Bool {
        if lhs.address != rhs.address { return false }
        if lhs.port != rhs.port { return false }
        if lhs.nodeID != rhs.nodeID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

// MARK: - Protocol_PingMessage + SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding

extension Protocol_PingMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding
{
    static let protoMessageName: String = _protobuf_package + ".PingMessage"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "from"),
        2: .same(proto: "to"),
        3: .same(proto: "version"),
        4: .same(proto: "timestamp"),
    ]

    mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularMessageField(value: &_from)
            case 2: try decoder.decodeSingularMessageField(value: &_to)
            case 3: try decoder.decodeSingularInt32Field(value: &version)
            case 4: try decoder.decodeSingularInt64Field(value: &timestamp)
            default: break
            }
        }
    }

    func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if let v = _from {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        try { if let v = self._to {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        if version != 0 {
            try visitor.visitSingularInt32Field(value: version, fieldNumber: 3)
        }
        if timestamp != 0 {
            try visitor.visitSingularInt64Field(value: timestamp, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Protocol_PingMessage, rhs: Protocol_PingMessage) -> Bool {
        if lhs._from != rhs._from { return false }
        if lhs._to != rhs._to { return false }
        if lhs.version != rhs.version { return false }
        if lhs.timestamp != rhs.timestamp { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

// MARK: - Protocol_PongMessage + SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding

extension Protocol_PongMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding
{
    static let protoMessageName: String = _protobuf_package + ".PongMessage"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "from"),
        2: .same(proto: "echo"),
        3: .same(proto: "timestamp"),
    ]

    mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularMessageField(value: &_from)
            case 2: try decoder.decodeSingularInt32Field(value: &echo)
            case 3: try decoder.decodeSingularInt64Field(value: &timestamp)
            default: break
            }
        }
    }

    func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if let v = _from {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if echo != 0 {
            try visitor.visitSingularInt32Field(value: echo, fieldNumber: 2)
        }
        if timestamp != 0 {
            try visitor.visitSingularInt64Field(value: timestamp, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Protocol_PongMessage, rhs: Protocol_PongMessage) -> Bool {
        if lhs._from != rhs._from { return false }
        if lhs.echo != rhs.echo { return false }
        if lhs.timestamp != rhs.timestamp { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

// MARK: - Protocol_FindNeighbours + SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding

extension Protocol_FindNeighbours: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding
{
    static let protoMessageName: String = _protobuf_package + ".FindNeighbours"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "from"),
        2: .same(proto: "targetId"),
        3: .same(proto: "timestamp"),
    ]

    mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularMessageField(value: &_from)
            case 2: try decoder.decodeSingularBytesField(value: &targetID)
            case 3: try decoder.decodeSingularInt64Field(value: &timestamp)
            default: break
            }
        }
    }

    func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if let v = _from {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if !targetID.isEmpty {
            try visitor.visitSingularBytesField(value: targetID, fieldNumber: 2)
        }
        if timestamp != 0 {
            try visitor.visitSingularInt64Field(value: timestamp, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Protocol_FindNeighbours, rhs: Protocol_FindNeighbours) -> Bool {
        if lhs._from != rhs._from { return false }
        if lhs.targetID != rhs.targetID { return false }
        if lhs.timestamp != rhs.timestamp { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

// MARK: - Protocol_Neighbours + SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding

extension Protocol_Neighbours: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding
{
    static let protoMessageName: String = _protobuf_package + ".Neighbours"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "from"),
        2: .same(proto: "neighbours"),
        3: .same(proto: "timestamp"),
    ]

    mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularMessageField(value: &_from)
            case 2: try decoder.decodeRepeatedMessageField(value: &neighbours)
            case 3: try decoder.decodeSingularInt64Field(value: &timestamp)
            default: break
            }
        }
    }

    func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if let v = _from {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if !neighbours.isEmpty {
            try visitor.visitRepeatedMessageField(value: neighbours, fieldNumber: 2)
        }
        if timestamp != 0 {
            try visitor.visitSingularInt64Field(value: timestamp, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Protocol_Neighbours, rhs: Protocol_Neighbours) -> Bool {
        if lhs._from != rhs._from { return false }
        if lhs.neighbours != rhs.neighbours { return false }
        if lhs.timestamp != rhs.timestamp { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

// MARK: - Protocol_BackupMessage + SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding

extension Protocol_BackupMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding
{
    static let protoMessageName: String = _protobuf_package + ".BackupMessage"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "flag"),
        2: .same(proto: "priority"),
    ]

    mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularBoolField(value: &flag)
            case 2: try decoder.decodeSingularInt32Field(value: &priority)
            default: break
            }
        }
    }

    func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        if flag != false {
            try visitor.visitSingularBoolField(value: flag, fieldNumber: 1)
        }
        if priority != 0 {
            try visitor.visitSingularInt32Field(value: priority, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Protocol_BackupMessage, rhs: Protocol_BackupMessage) -> Bool {
        if lhs.flag != rhs.flag { return false }
        if lhs.priority != rhs.priority { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
